import{_ as s,c as e,o as i,a3 as a}from"./chunks/framework.kyodG8gS.js";const g=JSON.parse('{"title":"Sobre TypeScript","description":"","frontmatter":{},"headers":[],"relativePath":"vue/about-typescript.md","filePath":"vue/about-typescript.md"}'),t={name:"vue/about-typescript.md"},n=a(`<h1 id="sobre-typescript" tabindex="-1">Sobre TypeScript <a class="header-anchor" href="#sobre-typescript" aria-label="Permalink to &quot;Sobre TypeScript&quot;">​</a></h1><blockquote><p><a href="https://www.typescriptlang.org/" target="_blank" rel="noreferrer">TypeScript</a> es un lenguaje de programación fuertemente tipado basado en <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript" target="_blank" rel="noreferrer">JavaScript</a>, lo que le brinda mejores herramientas a cualquier escala.</p></blockquote><p>Vue está escrito en TypeScript y proporciona compatibilidad con TypeScript de primera clase. En este apartado consideraremos tres aspectos que debemos tomar en cuenta respecto a usar TypeScript con Vue.</p><h2 id="archivos-con-extension-ts" tabindex="-1">Archivos con extensión <code>.ts</code> <a class="header-anchor" href="#archivos-con-extension-ts" aria-label="Permalink to &quot;Archivos con extensión \`.ts\`&quot;">​</a></h2><p>Los archivos dentro de la carpeta <code>src/</code> con extensión <code>.js</code> son renombrados con la extensión <code>.ts</code>.</p><p>Ejemplos:</p><ul><li><code>src/main.ts</code></li><li><code>src/router/index.ts</code></li><li><code>src/services/foo.ts</code></li><li><code>src/store/bar.ts</code></li><li><code>src/composables/useBaz.ts</code></li></ul><h2 id="uso-en-single-file-components" tabindex="-1">Uso en Single-File Components <a class="header-anchor" href="#uso-en-single-file-components" aria-label="Permalink to &quot;Uso en Single-File Components&quot;">​</a></h2><p>​</p><blockquote><p>Para usar <a href="https://vuejs.org/guide/typescript/overview.html#usage-in-single-file-components" target="_blank" rel="noreferrer">TypeScript en SFC</a>, agregue el atributo <code>lang=&quot;ts&quot;</code> a las etiquetas <code>&lt;script&gt;</code>.</p></blockquote><p>Cuando <code>lang=&quot;ts&quot;</code> está presente, todas las expresiones de <code>template</code> también disfrutan de una verificación de tipos más estricta.</p><p>Ejemplo</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  &lt;!-- --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><h2 id="definircomponente" tabindex="-1"><code>definirComponente()</code> <a class="header-anchor" href="#definircomponente" aria-label="Permalink to &quot;\`definirComponente()\`&quot;">​</a></h2><p>Para permitir que TypeScript infiera correctamente los tipos dentro de las opciones de los componentes, necesitamos definir los componentes con <a href="https://vuejs.org/guide/typescript/overview.html#definecomponent" target="_blank" rel="noreferrer">defineComponent()</a>.</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lang</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { defineComponent } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vue&#39;</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineComponent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  //</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  &lt;!-- --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre></div><hr><p>Llegado a este punto, es momento de construir nuestro CRUD ToDo con la Options API...</p>`,18),p=[n];function l(o,r,h,c,d,k){return i(),e("div",null,p)}const u=s(t,[["render",l]]);export{g as __pageData,u as default};
